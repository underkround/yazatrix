#ifndef __TETRISBOARD_H__
#define __TETRISBOARD_H__

#include "TetrisBoard.h"

/**
 * Tetromino
 *
 * $Id$
 * $Revision$
 *

 TODO:
   ongelma:
    palikan muoto ja rotaatiot tulee antaa konstruktorissa (blockfactory antaa ne),
    mutta miten muoto pidetään? ja onko pivot point aina toinen piste x ja y-suunnassa?
    lähdetään siitä että annetaan ainoastaan rotaation 0 muoto, jota pyöritetään
    laskennallisesti, eli getRotation(int r)-metodi palauttaa halutun rotaation r
   metodit joihin tämä vaikuttaa:
    konstruktori
    getRotation(int r)

 * Palikka huolehtii seuraavista asioista:
 *  - palikka voi olla liitettynä yhteen pelilautaan kerrallaan
 *  - palikka tietää muotonsa ja mahdolliset rotaationsa
 *  - palikka tietää omat koordinaattinsa pelilaudalla
 *  - palikka osaa kääntää omaa rotaatiotaan, ja tietää uudet koordinaattinsa
 *    pelilaudalla
 *  - palikka osaa liikuttaa itseään eri suuntiin, ja tietää uudet
 *    koordinaattinsa pelilaudalla
 *  - palikka osaa muuttuessaan testata että sen ruudut ovat tyhjät
 *    pelilaudalla
 *  - palikka osaa "polttaa/maalata" itsensä pelilautaan kun sen tila on
 *    muuttunut
 *  - palikan tilan muuttuessa se osaa asettaa vanhat ruutunsa laudalla
 *    tyhjiksi
 *  - palikka osaa kertoa onko se laskeutunut (seuraava tiputus osuisi laudan
 *    maastoon)
 *
 */

class CTetromino {

public:

    /**
     * Konstruktori, jossa määritetään palikan muoto, sekä mitä se maalaa.
     */
    CTetromino(int cellCoordsX[], int cellCoordsY[], int maxRotation, CELL_TYPE type);

    ~CTetromino(void);

    // ================= METODIT =============================================



// ===========================================================================
// PRIVATE
// ===========================================================================

private:

    /**
     * Kenttä (TetrisBoard), johon tämä palikka on kiinnittyneenä.
     * NULL, jos palikka ei ole kiinni missään kentässä.
     */
    TetrisBoard board;

    /**
     * palikan oma tyyppi, jota se piirtää pelikenttään
     * omiin koordinaatteihinsa
     */
    const CELL_TYPE m_type;

    /**
     * Palikan koordinaatit nykyisessä kentässään.
     * Palikka tarkistaa kenttään kiinnittyessään, että sen sijainti
     * koordinaateissa on sallittu, tai kiinnittymistä ei tapahdu.
     */
    int m_x;
    int m_y;

    /**
     * Palikan muoto, eli koordinaatit joissa palikalla on solu
     * rotaatiossa 0 (oletus) pivot-pointtinsa suhteen
     * (eli negatiivisia ja positiivisia koordinaatteja).
     * Tetromino koostuu neljästä solusta/ruudusta, eli tetrominolla
     * tauluissa on aina neljä koordinaattiparia.
     */
    int m_cellCoordsX[4];
    int m_cellCoordsY[4];

    /**
     * Palikan nykyinen orientaatio
     *
     * Orientaatio on
     */
    int m_rotation;

    /**
     * Palikan suurin sallittu rotaatio (0 -> m_rotationMax)
     * Asetetaan constructorissa.
     */
    const int m_rotationMax;

    // ================= METODIT =============================================

    /**
     * Testaa voiko palikka olla laudalla annetuissa koordinaateissa,
     * annetulla orientaatiolla.
     *
     * @return  false, jos joku palikan ruuduista ei ole tyhjä laudalla,
     *          tai jos palikka menee ohi laudasta sivusuunnassa (tai pohjasta)
     */
    bool canMoveTo(const int x, const int y, const int rotation);

    /**
     * @return  nykyinen rotaatio (arvo väliltä 0..3)
     */
    inline int getRotation() {
        return m_rotation;
    }

    /**
     * @return  nykyisestä seuraava rotaatio (pyöräytettäessä myötäpäivään)
     *          arvo väliltä 0..3
     */
    inline int getNextRotation() {
        return (m_rotation+1 > m_rotationMax) ? 0
            : m_rotation+1;
    }

    /**
     * @return  nykyisestä edellinen rotaatio (pyöräytettäessä vastapäivään)
     *          arvo väliltä 0..3
     */
    inline int getPreviousRotation() {
        return (m_rotation-1 < 0) ? m_rotationMax
            : m_rotation-1;
    }

    /**
     * "Polttaa" palikan pelilaudan kenttään, eli vaihtaa omat ruutunsa
     * pelilaudassa oman tyyppinsä mukaisiksi.
     */
    void insertToBoard();

    /**
     * Poistaa itsensä pelilaudalta, eli kirjoittaa tyhjän ruudun arvon
     * jokaiseen ruutuunsa pelilaudassa
     */
    void removeFromBoard();

};

#endif //__TETRISBOARD_H__
